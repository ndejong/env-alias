
---

env-alias:

  # ===
  # ASSIGNMENT VIA LOCAL TEXT FILE
  # ===

  # assign the env value using the 1st line of text in the text file
  sample_local_text_01:
    source: '/tmp/filename.txt'

  # assign the env value using the 2nd line of text in the text file
  sample_local_text_02:
    source: '/tmp/filename.txt'
    selector: 2

  # assign the env value using the 1st line of text in the text file - text file format used as default file format
  sample_local_text_03:
    source: '/tmp/filename'

  # assign the env value using the 1st line of text in the file and use a different variable name
  sample_local_text_04:
    name: 'sample_local_text_04_override_name'
    source: '/tmp/filename'

#  # assign the env value using the 1st line of text in the file specified by env ${some_env_with_a_filename}
#  sample_local_text_05:
#    source: 'env:some_env_with_a_filename'

  # assign the env value using the 1st line of text in the file and force the "text" content parser which is the default parser anyway
  sample_local_text_06:
    source: '/tmp/filename'
    parser: 'text'

  # ===
  # ASSIGNMENT VIA LOCAL INI FILE
  # ===

  # assign the env value from the [foo] section under the [bar] option value
  sample_local_ini_01:
    source: '/tmp/filename.ini'
    selector: 'foo.bar'

  # assign the env value from the [foo] section under the [bar] option value - set the parser since it can not be determined via filename extension
  sample_local_ini_02:
    source: '/tmp/filename_no_ini_extension'
    selector: 'foo.bar'
    parser: 'ini'

  # ===
  # ASSIGNMENT VIA LOCAL JSON FILE
  # ===

  # assign the env value from the JSON content using an xpath-style path selector to the desired value
  sample_local_json_01:
    source: '/tmp/filename.json'
    selector: 'foo.0.bar'

  # assign the env value from the JSON content using a JQ style path selector to the desired value
  sample_local_json_02:
    source: '/tmp/filename.json'
    selector: '.foo[1]bar'

  # assign the env value from the JSON content using an xpath-style path selector to the desired value - set the parser
  sample_local_json_03:
    source: '/tmp/filename_no_json_extension'
    selector: 'foo.0.bar'
    parser: 'json'

  # ===
  # ASSIGNMENT VIA LOCAL YAML FILE
  # ===

  # assign the env value from the JSON content using an xpath-style path selector to the desired value
  sample_local_yaml_01:
    source: '/tmp/filename.yaml'
    selector: 'foo.0.bar'

  # assign the env value from the YAML content using an xpath-style path selector to the desired value - set the parser
  sample_local_yaml_02:
    source: '/tmp/filename_no_yaml_extension'
    selector: 'foo.0.bar'
    parser: 'yaml'

  # ===
  # ASSIGNMENT VIA REMOTE FILE(S)
  # ===

  # assign the env value from remote TEXT content
  sample_remote_text_01:
    source: 'http://textfiles.com/computers/144disk.txt'
    selector: 1

  # assign the env value from remote JSON content using a JQ style selector
  sample_remote_json_01:
    source: 'https://ip-ranges.amazonaws.com/ip-ranges.json'
    selector: '.prefixes[2].ip_prefix'

  # assign the env value from remote JSON content using an xpath style selector
  sample_remote_json_02:
    source: 'https://ip-ranges.amazonaws.com/ip-ranges.json'
    selector: 'prefixes.2.ip_prefix'

  # ===
  # ASSIGNMENT VIA EXEC STDOUT
  # ===

  # assign the env value from the 1st line of the STDOUT of an shell command
  sample_exec_01:
    exec: 'head /dev/urandom | base64 -w0 | tr -d "/" | tr -d "+" | head -c20'

  # assign the env value from the 1st line of the STDOUT of an shell command
  sample_exec_02:
    exec: 'curl -s https://ip-ranges.amazonaws.com/ip-ranges.json'
    parser: 'json'
    selector: '.prefixes[1].ip_prefix'

  # run the shell-command and do not assign it to any env value
  sample_exec_03:
    exec: 'head /dev/urandom | base64 -w0'
    selector: 'null'

  # ===
  # DIRECT ASSIGNMENT
  # ===

  # assign env `sample_01` to value "somevalue"
  sample_direct_01:
    value: 'somevalue'

  # use an existing env value as input into this configuration; can be used in any env-alias option
  sample_direct_02:
    value: 'env:HOME'

  # env set and override the variable name; can be used in any env-alias setting arrangement
  sample_direct_03:
    name: 'sample_direct_03_override_name'
    value: 'env:HOME'

